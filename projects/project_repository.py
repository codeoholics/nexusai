import csv
import ast

from db import db_client
from db.db_client import remove_table

from shared.resourcereader import get_absolute_path_from_resources
import shared.logger as logger
log = logger.get_logger(__name__)
plagiarism_threshold = 0.10
top_n = 10

def insert_project_into_db(project_data):
    try:
        # Set default values to None if any keys are missing
        data_with_defaults = {
            'project_type': project_data.get('project_type'),
            'title': project_data.get('title'),
            'description': project_data.get('description'),
            'summary_file': project_data.get('summary_file'),
            'members': project_data.get('members'),
            'institute': project_data.get('institute'),
            'prototype_demo': project_data.get('prototype_demo', None),
            'prototype_sourcecode': project_data.get('prototype_sourcecode', None),
            'categories': project_data.get('categories'),
            'theme': project_data.get('theme'),
            'domain': project_data.get('domain'),
            'date_created': project_data.get('date_created'),
            'date_updated': project_data.get('date_updated'),
            'uploaded_by': project_data.get('uploaded_by')
        }

        cursor = db_client.get_conn().cursor()

        insert_query = """INSERT INTO projects (project_type, title, description, summary_file, members, institute, prototype_demo, prototype_sourcecode, categories, theme, domain, date_created, date_updated, uploaded_by)
        VALUES (%(project_type)s, %(title)s, %(description)s, %(summary_file)s, %(members)s, %(institute)s, %(prototype_demo)s, %(prototype_sourcecode)s, %(categories)s, %(theme)s, %(domain)s, %(date_created)s, %(date_updated)s, %(uploaded_by)s)
                RETURNING *;"""
        inserted_data = {}

        log.info(insert_query)
        log.info(data_with_defaults)

        cursor.execute(insert_query, data_with_defaults)
        inserted_row = cursor.fetchone()
        db_client.get_conn().commit()
        cursor.close()
        column_names = [desc[0] for desc in cursor.description]
        inserted_data = dict(zip(column_names, inserted_row))

        return inserted_data
    except Exception as e:
        raise Exception(f"Error inserting into database: {e}")



def insert_embeddings_to_project(projectid,embedding_type, embeddings ):
    inserted_ids = []
    try:
        # Connect to the database
        with db_client.get_conn() as conn:
            with conn.cursor() as cursor:
                for embedding in embeddings:
                    vector_data = ','.join(map(str, embedding))
                    cursor.execute(
                        "INSERT INTO project_vectors (project_id, embedding_type, embeddings) VALUES (%s, %s,%s)  RETURNING id",
                        (projectid, embedding_type, "[" + vector_data + "]")
                    )
                    inserted_id = cursor.fetchone()[0]  # Fetch the autogenerated ID
                    inserted_ids.append(inserted_id)  # Append the ID to the list

                conn.commit()
                return inserted_ids  # Return the list of inserted IDs


    except Exception as e:
        print(f"An error occurred: {e}")
        raise e
        # Handle or raise the exception as needed


def find_similar_and_check_plagiarism(embedding_type, embeddings):
    try:
        # Connect to the database
        with db_client.get_conn() as conn:
            with conn.cursor() as cursor:
                # Convert input embedding to a comma-separated string
                input_vector = ','.join(map(str, embeddings))

                # SQL query to find similar embeddings
                cursor.execute(
                    """
                    SELECT project_id, embeddings <-> vector(%s) AS similarity
                    FROM project_vectors
                    WHERE embedding_type = '%s'
                    ORDER BY similarity
                    LIMIT %s;
                    """,
                    (input_vector,embedding_type, top_n)
                )

                # Fetch results
                results = cursor.fetchall()

                # Check for potential plagiarism
                flagged_results = [(project_id, similarity, similarity <= plagiarism_threshold)
                                   for project_id, similarity in results]

                return flagged_results

    except Exception as e:
        print(f"An error occurred: {e}")
        raise e


def initialize_projects_table():

    if db_client.check_table_exists("projects"):
        return
    """Create the projects table if it doesn't exist."""
    try:
        print(db_client.get_conn())
        cursor = db_client.get_conn().cursor()

        create_table_query = """
                      CREATE TABLE projects (
                    id SERIAL PRIMARY KEY,
                    project_type VARCHAR(10) NOT NULL,
                    title TEXT NOT NULL,
                    uploaded_by VARCHAR(50) NOT NULL,
                    description TEXT,
                    summary_file TEXT,
                    members JSONB,
                    institute TEXT,
                    prototype_demo TEXT,
                    prototype_sourcecode TEXT,
                    categories JSONB,
                    theme VARCHAR(20),
                    domain VARCHAR(50),
                    date_created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    date_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    rating       INTEGER,
                    plagiarism_score INTEGER
                )"""

        cursor.execute(create_table_query)
        db_client.get_conn().commit()

        create_table_query = """
          CREATE TABLE project_vectors (
            id SERIAL PRIMARY KEY,
            project_id INTEGER, 
            embedding_type VARCHAR(10) NOT NULL,
            date_created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            embeddings Vector(1536)
        )"""

        cursor.execute(create_table_query)
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_project_id ON project_vectors (project_id);")

        # Create or replace index on embedding_type
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_embedding_type ON project_vectors (embedding_type);")

        # Create or replace composite index on project_id and embedding_type
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_project_id_embedding_type ON project_vectors (project_id, embedding_type);")


        db_client.get_conn().commit()

        cursor.close()

        print("Table projects and vectors created successfully!")
    except Exception as e:
        print(f"Error creating table: {e}")


def clean_project_data():
    remove_table("projects")
    remove_table("project_vectors")
