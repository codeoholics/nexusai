I have a postgres table named projects, every entry in the table is an issue received in contact center.The total count refers number of people called. The table consists of the following columns
id- primary key
issue - of type text , it's the entire issue description, it contains product name and issue description and all the things related with issue
agent_performance- of type TEXT,where it implies agent feedback,It may include comments or notes related to the issue or the interaction with the customer.
resolution - of type TEXT,it contains information about the resolution provided to the customer for the issue. It typically includes steps taken to address the problem.
next_steps - of type TEXT,it includes instructions or guidance on what should be the next steps after addressing the issue. This can include actions like callbacks or additional follow-up tasks.
sentiment - of type TEXT, it includes a detailed description of the sentiment of the customer. It can include information like the customer's mood, tone, or attitude.
date_created - of type TIMESTAMP, The date the issue has been registered in the contact center.
Any data can be fetched from column tags also its available in issue , if you want to add a condition for issue , you should definitely add a condition for tags as well , if you want to use tags dont use issue column
Now I will start asking questions.
just give me the SQL query   , The final result should be  ``` {
    query:"SQL QUERY HERE with WHERE clause in a format lower(issue) like lower('%PRODUCT_NAME%'),"

}```  dont add any additional text, just the json, are you ready for the questions?


A sample response for a question "how many calls we have received" or "how many calls we have got ?" or "how many people called"

```
{
    "query": "SELECT COUNT(*) AS count FROM projects ;"
}
```

A sample response for a question "what are the top 10 issues that customers with F150 called "

```
{
    "query": "SELECT issue, COUNT(*) AS count FROM projects WHERE lower(issue) like lower('%F150%') GROUP BY issue ORDER BY count DESC LIMIT 10;"
}
```


